<epic id="8" name="Schools Index Pagination" status="in_progress" started="2025-08-15T09:00:00Z">
    <metadata>
        <created>2025-08-15T09:00:00Z</created>
        <assignee>agent_claude</assignee>
        <estimated_effort>2-3 days</estimated_effort>
    </metadata>

    <description>
        Implement efficient pagination for the schools index page to handle large datasets and improve performance.
        Replace in-memory school loading with database pagination while
        maintaining existing filtering and search functionality.
    </description>

    <workflow>
        **CRITICAL: Test-Driven Development Approach**

        For **EACH** phase:
        1. **Implement Code** - Complete the implementation tasks
        2. **Write Tests IMMEDIATELY** - Create comprehensive test coverage
        3. **Run Tests Verify** - All tests must pass before proceeding
        4. **Run Linting/Type Checking** - Code must be clean and follow standards
        5. **NEVER move to next phase with failing tests**
    </workflow>

    <requirements>
        **Core Stories:**
        - Replace in-memory school loading with database pagination
        - Add pagination controls with page navigation
        - Maintain URL state for bookmarkable paginated views
        - Preserve existing filtering (status) and search functionality
        - Display pagination metadata (showing X of Y schools)

        **Technical Requirements:**
        - Database-level pagination to handle hundreds of schools
        - URL State Management - Page numbers, filters, and search terms in URL
        - LiveView Integration - Real-time pagination without page reloads
        - Mobile Responsive - Simplified pagination controls on mobile devices
        - QuickCrud Integration - Leverage existing paginate() functionality
    </requirements>

    <dependencies>
        - Epic 1: Database schema (crm_schools table) and QuickCrud system (required)
        - Epic 3: School management LiveView pages and existing filtering (required)
        - Epic 4: Contact management for preloading optimization (optional)
    </dependencies>

    <!-- Quick overview for scanning -->
    <outline>
        <phase id="1A" name="Enhanced Schools Context" status="completed" />
        <phase id="2A" name="Create PaginationComponent" status="in_progress" />
        <phase id="3A" name="LiveView Integration" status="pending" />
        <phase id="4A" name="Performance Optimization" status="pending" />
    </outline>

    <!-- Rich details for each phase -->
    <phases>
        <phase id="1A" name="Enhanced Schools Context" status="completed">
            <description>
                Extend MyApp.Schools.Main with paginated functions and database-level pagination
            </description>
            <deliverables>
                - list_schools_paginated function with combined filtering
                - Enhanced SchoolCrud with QuickCrud.paginate() integration
                - Efficient database queries with proper indexing
            </deliverables>
        </phase>
        <phase id="2A" name="Create PaginationComponent" status="in_progress">
            <description>
                Create reusable pagination component with accessibility
            </description>
            <deliverables>
                - Previous/Next navigation with disabled states
                - Page number display and clickable links
                - Mobile-responsive design with touch-friendly controls
                - Accessibility features (ARIA labels, keyboard navigation)
            </deliverables>
        </phase>
        <phase id="3A" name="LiveView Integration" status="pending">
            <description>
                Integrate pagination component with SchoolsLive.Index
            </description>
            <deliverables>
                - Enhanced SchoolsLive.Index with pagination assigns
                - Event handlers for pagination navigation
                - State management for page changes
                - Loading states during pagination
            </deliverables>
        </phase>
        <phase id="4A" name="Performance Optimization" status="pending">
            <description>
                Optimize performance and add polish features
            </description>
            <deliverables>
                - Database query optimization
                - Pagination metadata caching
                - Error handling for edge cases
                - Mobile responsive improvements
            </deliverables>
        </phase>
    </phases>

    <tasks>
        <task id="1A_1" phase_id="1A" status="completed">
            <description>Implement list_schools_paginated with combined filtering logic</description>
            <acceptance_criteria>
                - Function accepts opts, page, and page_size parameters
                - Integrates with existing status and search filtering
                - Returns paginated results with metadata
            </acceptance_criteria>
        </task>
        <task id="1A_2" phase_id="1A" status="completed">
            <description>Enhance SchoolCrud with QuickCrud.paginate() integration</description>
            <acceptance_criteria>
                - Efficient LIMIT/OFFSET queries
                - Contact preloading for paginated results
                - Proper indexing for performance
            </acceptance_criteria>
        </task>
        <task id="2A_1" phase_id="2A" status="in_progress">
            <description>Create PaginationComponent with Previous/Next controls</description>
            <acceptance_criteria>
                - Previous/Next buttons with proper disabled states
                - Current page highlighting
                - Mobile-responsive with 44px+ touch targets
                - Pagination metadata display
            </acceptance_criteria>
        </task>
        <task id="2A_2" phase_id="2A" status="pending">
            <description>Add accessibility features to pagination controls</description>
            <acceptance_criteria>
                - ARIA labels for screen readers
                - Keyboard navigation support
                - Focus management
                - High contrast support
            </acceptance_criteria>
        </task>
    </tasks>

    <tests>
        <test id="1A_1" phase_id="1A" status="passed">
            **GIVEN** I have 100 schools in the database
            **WHEN** I call list_schools_paginated with page=2, page_size=25
            **THEN** I get schools 26-50 with pagination metadata
        </test>
        <test id="1A_2" phase_id="1A" status="passed">
            **GIVEN** I have schools with different statuses
            **WHEN** I call list_schools_by_status_paginated with status=engaged
            **THEN** Only engaged schools are returned with pagination
        </test>
        <test id="2A_1" phase_id="2A" status="passed">
            **GIVEN** I have 100 schools displayed
            **WHEN** I click the "Next" button
            **THEN** I see page 2 and schools 26-50
        </test>
        <test id="2A_2" phase_id="2A" status="failing">
            **GIVEN** I'm on mobile device
            **WHEN** I tap pagination controls
            **THEN** They work and are easy to tap (44px+ targets)
        </test>
        <test id="2A_3" phase_id="2A" status="pending">
            **GIVEN** I'm on page 2 of schools
            **WHEN** I refresh the browser
            **THEN** I stay on page 2 with URL showing ?page=2
        </test>
    </tests>

    <events>
        <event timestamp="2025-08-15T09:00:00Z" agent="agent_claude" type="epic_started">
            Started Epic 8: Schools Pagination
        </event>
        <event timestamp="2025-08-15T10:30:00Z" agent="agent_claude" phase_id="1A" type="phase_completed">
            Completed Phase 1A: Enhanced Schools Context

            Result: All context functions implemented and tested
        </event>
        <event timestamp="2025-08-16T14:30:00Z" agent="agent_claude" phase_id="2A" type="implementation">
            Implemented basic pagination controls

            Files: src/components/Pagination.js (added), src/styles/pagination.css (added)
            Result: Basic controls working, all tests passing
        </event>
        <event timestamp="2025-08-16T14:45:00Z" agent="agent_claude" phase_id="2A" type="test_failed">
            Mobile responsive test failing

            Test: 2A_2 - Mobile pagination controls
            Issue: Touch targets too small, need 44px+ minimum
        </event>
        <event timestamp="2025-08-16T15:00:00Z" agent="agent_claude" phase_id="2A" type="blocker">
            Found design system dependency

            Blocker: Need design system tokens for mobile responsive design
        </event>
    </events>

    <current_state>
        <active_phase>2A</active_phase>
        <active_task>2A_1</active_task>
        <next_action>Fix mobile responsive pagination controls</next_action>
    </current_state>
</epic>